circuit testreg :
  module testreg :
    input clock : Clock
    input reset : UInt<1>
    output io : { flip A : UInt<4>, flip B : UInt<4>, P : UInt<8>, sarr2 : UInt<8>[4][4]}

    wire _sarr_WIRE : UInt<4>[4] @[testreg.scala 17:49]
    _sarr_WIRE[0] <= UInt<4>("h0") @[testreg.scala 17:49]
    _sarr_WIRE[1] <= UInt<4>("h0") @[testreg.scala 17:49]
    _sarr_WIRE[2] <= UInt<4>("h0") @[testreg.scala 17:49]
    _sarr_WIRE[3] <= UInt<4>("h0") @[testreg.scala 17:49]
    wire _sarr_WIRE_1 : UInt<4>[4] @[testreg.scala 17:49]
    _sarr_WIRE_1[0] <= UInt<4>("h0") @[testreg.scala 17:49]
    _sarr_WIRE_1[1] <= UInt<4>("h0") @[testreg.scala 17:49]
    _sarr_WIRE_1[2] <= UInt<4>("h0") @[testreg.scala 17:49]
    _sarr_WIRE_1[3] <= UInt<4>("h0") @[testreg.scala 17:49]
    wire _sarr_WIRE_2 : UInt<4>[4] @[testreg.scala 17:49]
    _sarr_WIRE_2[0] <= UInt<4>("h0") @[testreg.scala 17:49]
    _sarr_WIRE_2[1] <= UInt<4>("h0") @[testreg.scala 17:49]
    _sarr_WIRE_2[2] <= UInt<4>("h0") @[testreg.scala 17:49]
    _sarr_WIRE_2[3] <= UInt<4>("h0") @[testreg.scala 17:49]
    wire _sarr_WIRE_3 : UInt<4>[4] @[testreg.scala 17:49]
    _sarr_WIRE_3[0] <= UInt<4>("h0") @[testreg.scala 17:49]
    _sarr_WIRE_3[1] <= UInt<4>("h0") @[testreg.scala 17:49]
    _sarr_WIRE_3[2] <= UInt<4>("h0") @[testreg.scala 17:49]
    _sarr_WIRE_3[3] <= UInt<4>("h0") @[testreg.scala 17:49]
    wire _sarr_WIRE_4 : UInt<4>[4][4] @[testreg.scala 17:29]
    _sarr_WIRE_4[0] <= _sarr_WIRE @[testreg.scala 17:29]
    _sarr_WIRE_4[1] <= _sarr_WIRE_1 @[testreg.scala 17:29]
    _sarr_WIRE_4[2] <= _sarr_WIRE_2 @[testreg.scala 17:29]
    _sarr_WIRE_4[3] <= _sarr_WIRE_3 @[testreg.scala 17:29]
    reg sarr : UInt<4>[4][4], clock with :
      reset => (reset, _sarr_WIRE_4) @[testreg.scala 17:21]
    io.P <= UInt<1>("h0") @[testreg.scala 18:8]
    node _T = bits(io.B, 0, 0) @[testreg.scala 20:14]
    node _T_1 = eq(_T, UInt<1>("h0")) @[testreg.scala 20:18]
    when _T_1 : @[testreg.scala 20:26]
      sarr[0][0] <= UInt<1>("h0") @[testreg.scala 21:18]
    else :
      sarr[0][0] <= io.A @[testreg.scala 23:18]
    sarr[0][1] <= sarr[0][0] @[testreg.scala 26:18]
    sarr[0][2] <= sarr[0][1] @[testreg.scala 26:18]
    sarr[0][3] <= sarr[0][2] @[testreg.scala 26:18]
    node _T_2 = bits(io.B, 1, 1) @[testreg.scala 20:14]
    node _T_3 = eq(_T_2, UInt<1>("h0")) @[testreg.scala 20:18]
    when _T_3 : @[testreg.scala 20:26]
      sarr[1][0] <= UInt<1>("h0") @[testreg.scala 21:18]
    else :
      sarr[1][0] <= io.A @[testreg.scala 23:18]
    sarr[1][1] <= sarr[1][0] @[testreg.scala 26:18]
    sarr[1][2] <= sarr[1][1] @[testreg.scala 26:18]
    sarr[1][3] <= sarr[1][2] @[testreg.scala 26:18]
    node _T_4 = bits(io.B, 2, 2) @[testreg.scala 20:14]
    node _T_5 = eq(_T_4, UInt<1>("h0")) @[testreg.scala 20:18]
    when _T_5 : @[testreg.scala 20:26]
      sarr[2][0] <= UInt<1>("h0") @[testreg.scala 21:18]
    else :
      sarr[2][0] <= io.A @[testreg.scala 23:18]
    sarr[2][1] <= sarr[2][0] @[testreg.scala 26:18]
    sarr[2][2] <= sarr[2][1] @[testreg.scala 26:18]
    sarr[2][3] <= sarr[2][2] @[testreg.scala 26:18]
    node _T_6 = bits(io.B, 3, 3) @[testreg.scala 20:14]
    node _T_7 = eq(_T_6, UInt<1>("h0")) @[testreg.scala 20:18]
    when _T_7 : @[testreg.scala 20:26]
      sarr[3][0] <= UInt<1>("h0") @[testreg.scala 21:18]
    else :
      sarr[3][0] <= io.A @[testreg.scala 23:18]
    sarr[3][1] <= sarr[3][0] @[testreg.scala 26:18]
    sarr[3][2] <= sarr[3][1] @[testreg.scala 26:18]
    sarr[3][3] <= sarr[3][2] @[testreg.scala 26:18]
    io.sarr2 <= sarr @[testreg.scala 29:12]

